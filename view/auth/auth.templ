package auth

import "github.com/mbaitar/levenue-assignment/view/layout"
import "github.com/nedpals/supabase-go"

templ AccountSetup() {
	@layout.App(true) {
		<div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
			<h1 class="text-xl font-black mb-8 text-center">Lets connect to stripe</h1>
				<form hx-post="/account/stripe/onboarding" hx-swap="outerHTML" class="flex justify-center">
            		<button class="btn btn-primary">Connect to<i class="fa-brands fa-stripe fa-2x"></i></button>
            	</form>
		</div>
	}
}

type AccountSetupErrors struct {
	StripeConnected bool
}

type AccountSetupParams struct {
	StripeConnected bool
}

templ AccountSetupForm(parmas AccountSetupParams, errors AccountSetupErrors) {
	<form
		hx-post="/account/setup"
		hx-swap="outerHTML"
		class="flex "
	>
		<button class="btn btn-primary">setup account <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

type AccountSetupFetch struct {
	Fetching bool
}

templ AccountSetupFetchSubscriptions(params AccountSetupFetch) {
    	@layout.App(true) {
    		<div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
    			<h1 class="text-xl font-black mb-8 text-center">Lets fetch your data</h1>
    			   if !params.Fetching {
    			        <form hx-get="/account/stripe/fetch" hx-swap="innerHTML" class="flex justify-center">
                            <button class="btn btn-primary">Connect to<i class="fa-brands fa-stripe fa-2x"></i></button>
                        </form>
    			   }
    			   if params.Fetching {
    			       <h3 class="text-xl font-black mb-8 text-center">We are fetching your subscriptions and calculating the metrics</h3>
    			       <span class="loading loading-spinner loading-xs"></span>
    			   }
    		</div>
    	}
}

templ Login() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Login to levenue</h1>
				@LoginForm(supabase.UserCredentials{}, LoginErrors{})
			</div>
		</div>
	}
}

templ Signup() {
	@layout.App(false) {
		<div class="flex justify-center mt-[calc(100vh-100vh+8rem)]">
			<div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
				<h1 class="text-center text-xl font-black mb-10">Signup to levenue</h1>
				@SignupForm(SignupParams{}, SignupErrors{})
			</div>
		</div>
	}
}

templ SignupSuccess(email string) {
	<div>A confirmation email has been sent to: <span class="font-semibold text-success">{ email }</span></div>
}

type SignupParams struct {
	Email           string
	Password        string
	ConfirmPassword string
}

type SignupErrors struct {
	Email           string
	Password        string
	ConfirmPassword string
}

templ SignupForm(params SignupParams, errors SignupErrors) {
	<form
		hx-post="/signup"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={ params.Email } name="email" autocomplete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required autocomplete="off" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Confirm Password</span>
			</div>
			<input type="password" name="confirmPassword" required autocomplete="off" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.ConfirmPassword }</span>
				</div>
			}
		</div>
		<button type="submit" class="btn btn-primary w-full">login <i class="fa-solid fa-arrow-right"></i></button>
	</form>
}

type LoginErrors struct {
	Email              string
	Password           string
	InvalidCredentials string
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
	<form
		hx-post="/login"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Email address</span>
			</div>
			<input type="email" value={ creds.Email } name="email" autocomplete="off" required placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Email) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Email }</span>
				</div>
			}
		</div>
		<div class="w-full">
			<div class="label">
				<span class="label-text">Password</span>
			</div>
			<input type="password" name="password" required autocomplete="off" placeholder="Type here" class="input input-bordered w-full"/>
			if len(errors.Password) > 0 {
				<div class="label">
					<span class="label-text-alt text-error">{ errors.Password }</span>
				</div>
			}
		</div>
		if len(errors.InvalidCredentials) > 0 {
			<div class="text-sm text-error">{ errors.InvalidCredentials }</div>
		}
		<button type="submit" class="btn btn-primary w-full">login <i class="fa-solid fa-arrow-right"></i></button>
		<div class="divider">OR</div>
		<a href="/login/provider/google" class="btn btn-outline w-full">login with Google <i class="fa-brands fa-google"></i></a>
	</form>
}

templ ResetPassword() {
	@layout.App(true) {
		<div class="max-w-2xl w-full mx-auto mt-8">
			<div>
				<h1 class="text-lg font-semibold border-b border-gray-700 pb-2">Reset password</h1>
				<div class="py-6">
					<div class="text-label mb-2">Enter new password</div>
					@ResetPasswordForm(ResetPasswordErrors{})
				</div>
			</div>
		</div>
	}
}

type ResetPasswordParams struct {
	NewPassword string
}

type ResetPasswordErrors struct {
	NewPassword string
}

templ ResetPasswordSuccess(email string) {
	<div>A password reset link is being sent to <span class="text-info font-semibold">{ email }</span></div>
}

templ ResetPasswordForm(errors ResetPasswordErrors) {
	<form
		hx-put="/auth/reset-password"
		hx-swap="outerHTML"
	>
		<div class="mb-4">
			<input
				class="input input-bordered w-full max-w-sm"
				name="password"
				type="password"
			/>
			if len(errors.NewPassword) > 0 {
				<div class="text-sm text-error mt-1">{ errors.NewPassword }</div>
			}
		</div>
		<button class="btn btn-primary">update password</button>
	</form>
}

templ CallbackScript() {
	<script>
		var url = window.location.href;
		var newURL = url.replace("#", "?")
		window.location = newURL
	</script>
}
